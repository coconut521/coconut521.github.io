import{_ as s,c as a,a as i,o as n}from"./app-CHabsAh7.js";const t={};function l(o,e){return n(),a("div",null,e[0]||(e[0]=[i(`<blockquote><p><strong>Q#</strong>(<em>QSharp</em>)是一种专为量子计算机开发的量子编程语言，官方给出了三种不同的使用方式 1.Q#+Python，即在 <strong>.q</strong> (QSharp)文件里编写量子算法，然后在Python中(以Host.py的形式)调用 2.Q#+C#，内容同上，改为采用C#作为驱动 3.在Visual Studio（2017或2019均可）中安装相关拓展从而直接在VS中编写量子程序。 <strong>由于我比较倾向第一种，故本教程采用vscode安装并使用Q#</strong></p></blockquote><h1 id="前期准备" tabindex="-1"><a class="header-anchor" href="#前期准备"><span>前期准备</span></a></h1><p>首先，你需要安装一个......电脑！（这可不是废话，你总不能指望用大脑写程序吧。不过说句废话，或许将来真有可能用大脑编写程序！）</p><p>然后<a href="https://code.visualstudio.com/" target="_blank" rel="noopener noreferrer">VSCode</a>。这是算是基本中的基本了，也是微软官方的推荐。当然，你可以选的自己喜欢的代码编辑器。</p><blockquote><p>如果不知道什么是VSCode或者什么是代码编辑器，又或者不太了解编程，可以看我写的编程基础部分 都明白的跳过这些直接看后边。 我会在“基础”部分对电脑、编程等基本知识以及一些属于做一些讲解。</p></blockquote><p>下面的内容很重要，如果没有安装好可能导致代码无法运行或各种错误。</p><ul><li><a href="https://www.python.org/downloads/" target="_blank" rel="noopener noreferrer">Python</a> 3.6或更高版本</li><li><a href="https://pip.pypa.io/en/stable/installing" target="_blank" rel="noopener noreferrer">PIP</a> Python 包管理器</li><li><a href="https://www.microsoft.com/net/download" target="_blank" rel="noopener noreferrer">.NET Core SDK 3.1 或更高版本</a></li></ul><h2 id="python的安装" tabindex="-1"><a class="header-anchor" href="#python的安装"><span>Python的安装</span></a></h2><p>在官网中下载Python最新版本，地址在上面点击Python即可打开，没有找到的...<a href="https://www.python.org/downloads/" target="_blank" rel="noopener noreferrer">ここにです! </a></p><p>这个就不过多赘述了，个人认为安装时没有太多问题。</p><h2 id="pip安装" tabindex="-1"><a class="header-anchor" href="#pip安装"><span>PIP安装</span></a></h2><p>这个有必要强调一下，安装时需要使用<code>python3 xxxx/get-pip.py</code>。注意是<strong>python3</strong>，而不是<em>python</em></p><p>剩下的照常安装......</p><h2 id="net-core-sdk的安装" tabindex="-1"><a class="header-anchor" href="#net-core-sdk的安装"><span>.Net Core SDK的安装</span></a></h2><p>非常简单，按照官网描述，很快就可以安装。</p><h1 id="qdk-qsharp-development-kit-的安装" tabindex="-1"><a class="header-anchor" href="#qdk-qsharp-development-kit-的安装"><span>QDK（QSharp Development Kit）的安装</span></a></h1><p>安装进行到这步就说明离成功不远了，但是别大意，这里才是最容易出现问题的地方！！！</p><ol><li>安装<code>qsharp</code>包，这是一个允许在 Q # 和 Python 之间互操作的 Python 包。</li></ol><div class="language-cmd line-numbers-mode" data-highlighter="shiki" data-ext="cmd" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">pip install qsharp</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="2"><li>安装<code>iqsharp</code>，Jupyter 和 Python 使用的内核，提供用于编译和执行 Q # 操作的核心功能。</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>dotnet tool install -g Microsoft.Quantum.IQSharp</span></span>
<span class="line"><span>dotnet iqsharp install</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><a href="https://marketplace.visualstudio.com/items?itemName=quantum.quantum-devkit-vscode" target="_blank" rel="noopener noreferrer">为 VS Code 安装 QDK 扩展</a></li></ol><p>这个点击链接查看微软官网的文档</p><blockquote><p>声明：以上部分内容来自<a href="https://docs.microsoft.com/zh-cn/quantum/install-guide/pyinstall" target="_blank" rel="noopener noreferrer">微软官网关于Q#的文档</a>，点击查看官方的说明～</p></blockquote><h1 id="hello-world-测试" tabindex="-1"><a class="header-anchor" href="#hello-world-测试"><span>Hello, World! 测试</span></a></h1><blockquote><p>什么！？你还不知道什么是Hello,World！来来来，“分类-IT-基础”你可以看看！</p></blockquote><ul><li>通过创建名为 Operation.qs 的文件并向其添加以下代码来创建最小 Q# 操作：</li></ul><div class="language-q# line-numbers-mode" data-highlighter="shiki" data-ext="q#" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>namespace HelloWorld {</span></span>
<span class="line"><span>    open Microsoft.Quantum.Intrinsic;</span></span>
<span class="line"><span>    open Microsoft.Quantum.Canon;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    operation SayHello() : Unit {</span></span>
<span class="line"><span>        Message(&quot;Hello from quantum world!&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>创建名为 hello_world.py 的 Python 程序来调用 Q# SayHello() 操作：</li></ul><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> qsharp</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">from</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> HelloWorld </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> SayHello</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">SayHello</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">simulate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>运行该程序</li></ul><p><em><strong>这里需要说明一下，根据官网的文档是</strong></em><code>python hello_world.py</code><em><strong>但我们需要使用</strong></em><code>python3 hello_world.py</code></p><ul><li>如果程序输出如下内容，则表明一切都没问题了！安装成功了！</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Hello</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> from</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> quantum</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> world!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h1 id="可能遇到的问题" tabindex="-1"><a class="header-anchor" href="#可能遇到的问题"><span>可能遇到的问题</span></a></h1><ul><li>无法在输入命令时总是显示各种失败</li></ul><p>可能是你没有给予相应的权限，如果是Windows系统，请右键cmd.exe选择“以管理员身份打开”，Mac/Linux则需要在命令前面添加<code>sudo </code>（别忘了空格）以保证该软件有相应的权限去安装。</p><ul><li>pip安装qsharp时显示版本问题</li></ul><p>可能的解决方案：回到安装PIP的那一步使用<code>python3</code>命令进行安装</p><h1 id="结束语" tabindex="-1"><a class="header-anchor" href="#结束语"><span>结束语</span></a></h1><p>如果还有问题或有需要交流的可以评论，我会不定期查看评论并且进行回复，如果您提的问题或建议有帮助，我会及时的更新该文档，以便其他人更好的阅读。</p><h2 id="谢谢观看" tabindex="-1"><a class="header-anchor" href="#谢谢观看"><span>谢谢观看！</span></a></h2>`,42)]))}const p=s(t,[["render",l]]),h=JSON.parse('{"path":"/qsharp/ogl6jclh/","title":"Q#的安装（VSCode）","lang":"en-US","frontmatter":{"title":"Q#的安装（VSCode）","createTime":"2020/04/05 21:36:52","permalink":"/qsharp/ogl6jclh/","tags":["Q#","Python","IT"],"description":"Q#(QSharp)是一种专为量子计算机开发的量子编程语言，官方给出了三种不同的使用方式 1.Q#+Python，即在 .q (QSharp)文件里编写量子算法，然后在Python中(以Host.py的形式)调用 2.Q#+C#，内容同上，改为采用C#作为驱动 3.在Visual Studio（2017或2019均可）中安装相关拓展从而直接在VS中编写...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Q#的安装（VSCode）\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-23T17:05:46.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://choisaitung.space/qsharp/ogl6jclh/"}],["meta",{"property":"og:site_name","content":"CoconutYeah"}],["meta",{"property":"og:title","content":"Q#的安装（VSCode）"}],["meta",{"property":"og:description","content":"Q#(QSharp)是一种专为量子计算机开发的量子编程语言，官方给出了三种不同的使用方式 1.Q#+Python，即在 .q (QSharp)文件里编写量子算法，然后在Python中(以Host.py的形式)调用 2.Q#+C#，内容同上，改为采用C#作为驱动 3.在Visual Studio（2017或2019均可）中安装相关拓展从而直接在VS中编写..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-05-23T17:05:46.000Z"}],["meta",{"property":"article:tag","content":"IT"}],["meta",{"property":"article:tag","content":"Python"}],["meta",{"property":"article:tag","content":"Q#"}],["meta",{"property":"article:modified_time","content":"2025-05-23T17:05:46.000Z"}]]},"readingTime":{"minutes":3.41,"words":1024},"git":{"createdTime":1748019946000,"updatedTime":1748019946000,"contributors":[{"name":"coconut521","username":"coconut521","email":"tsoi521@outlook.com","commits":1,"avatar":"https://avatars.githubusercontent.com/coconut521?v=4","url":"https://github.com/coconut521"}]},"autoDesc":true,"filePathRelative":"notes/qsharp/install_hello.md","headers":[]}');export{p as comp,h as data};
